<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Pentesting on GET command and control</title>
    <link>https://GETC2.github.io/categories/web-pentesting/</link>
    <description>Recent content in Web Pentesting on GET command and control</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 07 Mar 2021 16:25:29 +0800</lastBuildDate><atom:link href="https://GETC2.github.io/categories/web-pentesting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Block Cipher ECB Shuffling</title>
      <link>https://GETC2.github.io/post/block-cipher-ecb-shuffling/</link>
      <pubDate>Sun, 07 Mar 2021 16:25:29 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/block-cipher-ecb-shuffling/</guid>
      <description>Block Cipher ECB Shuffling 这里我们介绍针对块密码的ECB shuffling攻击。首先还是回顾一下块密码的Electronic Code Book(ECB)模式： 可以看到，明文被分块，每个分块被分别加密。分块大小根据选择的算法不同而不同。比如DES,3DES为8；而AES为16字节。由</description>
    </item>
    
    <item>
      <title>Steam Cipher IV Collision</title>
      <link>https://GETC2.github.io/post/steam-cipher-iv-collision/</link>
      <pubDate>Sun, 07 Mar 2021 15:38:56 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/steam-cipher-iv-collision/</guid>
      <description>Stream Cipher IV Collision 首先用一张图表示流密码的加密解密过程： 流密码的特点是： 密文和明文的长度相同 改变明文的一部分，密文的相应部分也会改变，其余部分不变 密文长度没有必要是8字节或者16字节的整数倍，这是和块密码的区别 需要注意的是，如果使用流密码加密，那么需要在加密不同信息</description>
    </item>
    
    <item>
      <title>Attacking Encryption Key</title>
      <link>https://GETC2.github.io/post/attacking-encryption-key/</link>
      <pubDate>Sun, 07 Mar 2021 14:31:11 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/attacking-encryption-key/</guid>
      <description>Attacking Encryption key 我们经常可以看到加密被应用在Web的以下方面： Session tokens 密码哈希 加密CAPTCHAs 服务器文件名 Cookie Hidden fields 数据库数据 在针对Web进行渗透时，我们可能需要针对这些加密进行攻击。比如如果服务器存在LFI漏洞，但是由于文件名进行了加密或者哈希处理，那么我们就需要搞清</description>
    </item>
    
    <item>
      <title>Sql Injection</title>
      <link>https://GETC2.github.io/post/sql-injection/</link>
      <pubDate>Sun, 07 Mar 2021 08:43:04 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/sql-injection/</guid>
      <description>SQL Injection 针对SQL Injection，我们可以按照以下的步骤处理： 寻找注入点 在这里不赘述如何判断注入点。最简单的情况是当输入单引号或者双引号，数据库的语法错误直接回显，然后就可以确定这是注入点。在后端不返回任何响应的情况下，可以通过猜测查询语句context来</description>
    </item>
    
    <item>
      <title>Type Inference in PHP</title>
      <link>https://GETC2.github.io/post/type-inference-in-php/</link>
      <pubDate>Fri, 05 Mar 2021 18:37:00 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/type-inference-in-php/</guid>
      <description>Type Inference in PHP PHP是动态类型语言。当定义变量时，我们不需要指定变量类型，PHP会根据赋值推断变量的类型。另外，在进行数学运算或loose comparison的时候，如果操作数类型不一致或者不与运算符相符，那么PHP会自动进行类型转换。它会根据操作数和操作符来推</description>
    </item>
    
    <item>
      <title>Templet Injection</title>
      <link>https://GETC2.github.io/post/templet-injection/</link>
      <pubDate>Thu, 04 Mar 2021 19:23:27 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/templet-injection/</guid>
      <description>Templet Injection 关于什么是模板注入，这里就不多说了。主要记录一下模板注入漏洞的利用流程。 发现模板注入漏洞 不同框架利用的模板引擎不同，所使用的模板语言也就不同。但是发现漏洞的方法是一致的。一般都是通过再用户控制的输入中插入模板语言定义的逻辑操作，比如数学计算： @(2*2) //Razor ${2*2} //Freemarker {{2*2}}</description>
    </item>
    
    <item>
      <title>File Inclusion</title>
      <link>https://GETC2.github.io/post/file-inclusion/</link>
      <pubDate>Mon, 01 Mar 2021 10:23:59 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/file-inclusion/</guid>
      <description>文件包含 要想高效地利用文件包含漏洞，我们可以遵循以下的方法： 搞清楚该漏洞针对文件路径的限制。比如 用户控制的文件名是否有前缀和后缀 是否允许根目录之外的文件路径 是否允许绝对路径或者URL 利用漏洞获取本地文件。 特定于操作系统的文件，比如Linux的/etc/pa</description>
    </item>
    
  </channel>
</rss>
