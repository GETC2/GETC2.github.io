<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Pentesting on GET command and control</title>
    <link>https://GETC2.github.io/categories/web-pentesting/</link>
    <description>Recent content in Web Pentesting on GET command and control</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 05 Mar 2021 18:37:00 +0800</lastBuildDate><atom:link href="https://GETC2.github.io/categories/web-pentesting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Type Inference in PHP</title>
      <link>https://GETC2.github.io/post/type-inference-in-php/</link>
      <pubDate>Fri, 05 Mar 2021 18:37:00 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/type-inference-in-php/</guid>
      <description>Type Inference in PHP PHP是动态类型语言。当定义变量时，我们不需要指定变量类型，PHP会根据赋值推断变量的类型。另外，在进行数学运算或loose comparison的时候，如果操作数类型不一致或者不与运算符相符，那么PHP会自动进行类型转换。它会根据操作数和操作符来推</description>
    </item>
    
    <item>
      <title>Templet Injection</title>
      <link>https://GETC2.github.io/post/templet-injection/</link>
      <pubDate>Thu, 04 Mar 2021 19:23:27 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/templet-injection/</guid>
      <description>Templet Injection 关于什么是模板注入，这里就不多说了。主要记录一下模板注入漏洞的利用流程。 发现模板注入漏洞 不同框架利用的模板引擎不同，所使用的模板语言也就不同。但是发现漏洞的方法是一致的。一般都是通过再用户控制的输入中插入模板语言定义的逻辑操作，比如数学计算： @(2*2) //Razor ${2*2} //Freemarker {{2*2}}</description>
    </item>
    
    <item>
      <title>File Inclusion</title>
      <link>https://GETC2.github.io/post/file-inclusion/</link>
      <pubDate>Mon, 01 Mar 2021 10:23:59 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/file-inclusion/</guid>
      <description>文件包含 要想高效地利用文件包含漏洞，我们可以遵循以下的方法： 搞清楚该漏洞针对文件路径的限制。比如 用户控制的文件名是否有前缀和后缀 是否允许根目录之外的文件路径 是否允许绝对路径或者URL 利用漏洞获取本地文件。 特定于操作系统的文件，比如Linux的/etc/pa</description>
    </item>
    
  </channel>
</rss>
