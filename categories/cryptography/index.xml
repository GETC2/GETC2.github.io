<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cryptography on GET command and control</title>
    <link>https://GETC2.github.io/categories/cryptography/</link>
    <description>Recent content in Cryptography on GET command and control</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 07 Mar 2021 21:09:29 +0800</lastBuildDate><atom:link href="https://GETC2.github.io/categories/cryptography/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Padding Oracle</title>
      <link>https://GETC2.github.io/post/padding-oracle/</link>
      <pubDate>Sun, 07 Mar 2021 21:09:29 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/padding-oracle/</guid>
      <description>Padding Oracle Attack 这里介绍如何借助块密码的padding来进行攻击并获取明文。首先介绍适用于这种攻击的一种padding。 PKSC#7 Padding 众所周知，块密码需要将明文分块然后加密。对于不满足分块大小的部分需要padding后才能加密。padding有不同的方法，有的直接在后面补\x</description>
    </item>
    
    <item>
      <title>CBC Bit Flipping</title>
      <link>https://GETC2.github.io/post/cbc-bit-flipping/</link>
      <pubDate>Sun, 07 Mar 2021 19:49:08 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/cbc-bit-flipping/</guid>
      <description>CBC Bit Flipping 这里介绍一下如何针对CBC模式的块密码进行攻击。首先还是回顾一下该模式下加密的过程： 如上所示，明文首先分块，然后和IV或者前一个加密分块异或，最后经由key加密。 针对这种模式的块密码，我们可以这样处理： 如上图所示，如果我们只有密文和IV，那么我们可以</description>
    </item>
    
    <item>
      <title>Block Cipher ECB Shuffling</title>
      <link>https://GETC2.github.io/post/block-cipher-ecb-shuffling/</link>
      <pubDate>Sun, 07 Mar 2021 16:25:29 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/block-cipher-ecb-shuffling/</guid>
      <description>Block Cipher ECB Shuffling 这里我们介绍针对块密码的ECB shuffling攻击。首先还是回顾一下块密码的Electronic Code Book(ECB)模式： 可以看到，明文被分块，每个分块被分别加密。分块大小根据选择的算法不同而不同。比如DES,3DES为8；而AES为16字节。由</description>
    </item>
    
    <item>
      <title>Steam Cipher IV Collision</title>
      <link>https://GETC2.github.io/post/steam-cipher-iv-collision/</link>
      <pubDate>Sun, 07 Mar 2021 15:38:56 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/steam-cipher-iv-collision/</guid>
      <description>Stream Cipher IV Collision 首先用一张图表示流密码的加密解密过程： 流密码的特点是： 密文和明文的长度相同 改变明文的一部分，密文的相应部分也会改变，其余部分不变 密文长度没有必要是8字节或者16字节的整数倍，这是和块密码的区别 需要注意的是，如果使用流密码加密，那么需要在加密不同信息</description>
    </item>
    
    <item>
      <title>Attacking Encryption Key</title>
      <link>https://GETC2.github.io/post/attacking-encryption-key/</link>
      <pubDate>Sun, 07 Mar 2021 14:31:11 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/attacking-encryption-key/</guid>
      <description>Attacking Encryption key 我们经常可以看到加密被应用在Web的以下方面： Session tokens 密码哈希 加密CAPTCHAs 服务器文件名 Cookie Hidden fields 数据库数据 在针对Web进行渗透时，我们可能需要针对这些加密进行攻击。比如如果服务器存在LFI漏洞，但是由于文件名进行了加密或者哈希处理，那么我们就需要搞清</description>
    </item>
    
  </channel>
</rss>
