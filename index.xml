<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GET command and control</title>
    <link>https://GETC2.github.io/</link>
    <description>Recent content on GET command and control</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 22 Mar 2021 10:33:59 +0800</lastBuildDate><atom:link href="https://GETC2.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Purple Team: Domain Persistence</title>
      <link>https://GETC2.github.io/post/purple-team-domain-persistence/</link>
      <pubDate>Mon, 22 Mar 2021 10:33:59 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/purple-team-domain-persistence/</guid>
      <description>之前介绍过横向移动，如果发现了具有域管理员权限的机器，并且能通过之前介绍的各种方法获取Access Token,NT hash, kerberos key，那么就可以获取域管理员权限。在这之后，我们可以通过以下方法达到Domain Persistence： NTDS.dit 创建域管理员账号 金票 Skeleton key DCSync或者DC</description>
    </item>
    
    <item>
      <title>Purple Team: Lateral Movement</title>
      <link>https://GETC2.github.io/post/purple-team-lateral-movement/</link>
      <pubDate>Sat, 20 Mar 2021 15:04:12 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/purple-team-lateral-movement/</guid>
      <description>接着之前介绍的权限维持和C2通道的建立，这里介绍一下横向移动的步骤和蓝队方的措施。 红队 首先是大概的步骤： 权限提升 dump credentials 横向移动 接下来依次介绍各个步骤的具体细节。 权限提升 其实如果初始payload所在的进程在本地就有管理员权限的话，就没有必要进行下面的权限提升</description>
    </item>
    
    <item>
      <title>Purple Team: Detecting C2 Channel</title>
      <link>https://GETC2.github.io/post/purple-team-detecting-c2-channel/</link>
      <pubDate>Thu, 18 Mar 2021 15:07:25 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/purple-team-detecting-c2-channel/</guid>
      <description>相比于之前介绍的权限维持，C2很难被检测到。因为一般的C2可以通过DNS, HTTP等协议进行通信，而DNS, HTTP在一般环境中的流量很大。再加上C2的通信内容通常很隐蔽，比如将命令和执行结果隐写并借由社交媒体进行通信。 在这里为了全面，还是介绍一下如何建立</description>
    </item>
    
    <item>
      <title>Purple Team: Detecting Persistence</title>
      <link>https://GETC2.github.io/post/purple-team-detecing-persistence/</link>
      <pubDate>Thu, 18 Mar 2021 14:01:08 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/purple-team-detecing-persistence/</guid>
      <description>之前分别从红队和蓝队的视角介绍过如何处理deliver payload,payload execution，这里主要介绍如何处理权限维持，当然最主要的还是从蓝队的视角看如何detect。 实验 这里就直接在域内一台主机上运行有漏洞的应用icecast，如下图所示： 红队需要利用漏洞实现权限维持</description>
    </item>
    
    <item>
      <title>Purple Team: Preventing Payload Execution</title>
      <link>https://GETC2.github.io/post/purple-team-preventing-payload-execution/</link>
      <pubDate>Tue, 16 Mar 2021 08:32:56 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/purple-team-preventing-payload-execution/</guid>
      <description>之前介绍过如何阻止payload delivery。但是如果那些安全措施没能奏效的话，作为防守方需要的是defense in depth，我们可以阻止payload的执行。下面就记录一下关于攻击方如何执行payload以及相对应的防御措施。 应用白名单 防守方可以利用</description>
    </item>
    
    <item>
      <title>Purple Team: Hindering Payload Delivery</title>
      <link>https://GETC2.github.io/post/purple-team-hindering-payload-delivery/</link>
      <pubDate>Tue, 16 Mar 2021 08:32:41 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/purple-team-hindering-payload-delivery/</guid>
      <description>这里记录一下常见的payload delivery的方法以及针对这些方法的防御措施。 Delivery Mechanisms 常见的方法包括但不限于： U盘 Physical Access 邮件 水坑攻击 服务漏洞的利用（这里暂且不讨论此种方法） 下面分别针对这些方法和防御措施进行介绍。 1. U盘 我们可以通过邮寄，社会工程将带有payl</description>
    </item>
    
    <item>
      <title>WAF and Filter Bypass</title>
      <link>https://GETC2.github.io/post/waf-and-filter-bypass/</link>
      <pubDate>Thu, 11 Mar 2021 09:05:17 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/waf-and-filter-bypass/</guid>
      <description>WAF and Filter Bypass 针对Web攻击的防御主要分以下三种类型： 开发人员在应用内部自己写的filter 框架自带的filter inline security devices比如Web Application Firewall（WAF) 在进行渗透测试时，我们需要搞清楚目标有没有部署这些防御。否则可能会出现false negati</description>
    </item>
    
    <item>
      <title>Padding Oracle</title>
      <link>https://GETC2.github.io/post/padding-oracle/</link>
      <pubDate>Sun, 07 Mar 2021 21:09:29 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/padding-oracle/</guid>
      <description>Padding Oracle Attack 这里介绍如何借助块密码的padding来进行攻击并获取明文。首先介绍适用于这种攻击的一种padding。 PKSC#7 Padding 众所周知，块密码需要将明文分块然后加密。对于不满足分块大小的部分需要padding后才能加密。padding有不同的方法，有的直接在后面补\x</description>
    </item>
    
    <item>
      <title>CBC Bit Flipping</title>
      <link>https://GETC2.github.io/post/cbc-bit-flipping/</link>
      <pubDate>Sun, 07 Mar 2021 19:49:08 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/cbc-bit-flipping/</guid>
      <description>CBC Bit Flipping 这里介绍一下如何针对CBC模式的块密码进行攻击。首先还是回顾一下该模式下加密的过程： 如上所示，明文首先分块，然后和IV或者前一个加密分块异或，最后经由key加密。 针对这种模式的块密码，我们可以这样处理： 如上图所示，如果我们只有密文和IV，那么我们可以</description>
    </item>
    
    <item>
      <title>Block Cipher ECB Shuffling</title>
      <link>https://GETC2.github.io/post/block-cipher-ecb-shuffling/</link>
      <pubDate>Sun, 07 Mar 2021 16:25:29 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/block-cipher-ecb-shuffling/</guid>
      <description>Block Cipher ECB Shuffling 这里我们介绍针对块密码的ECB shuffling攻击。首先还是回顾一下块密码的Electronic Code Book(ECB)模式： 可以看到，明文被分块，每个分块被分别加密。分块大小根据选择的算法不同而不同。比如DES,3DES为8；而AES为16字节。由</description>
    </item>
    
    <item>
      <title>Steam Cipher IV Collision</title>
      <link>https://GETC2.github.io/post/steam-cipher-iv-collision/</link>
      <pubDate>Sun, 07 Mar 2021 15:38:56 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/steam-cipher-iv-collision/</guid>
      <description>Stream Cipher IV Collision 首先用一张图表示流密码的加密解密过程： 流密码的特点是： 密文和明文的长度相同 改变明文的一部分，密文的相应部分也会改变，其余部分不变 密文长度没有必要是8字节或者16字节的整数倍，这是和块密码的区别 需要注意的是，如果使用流密码加密，那么需要在加密不同信息</description>
    </item>
    
    <item>
      <title>Attacking Encryption Key</title>
      <link>https://GETC2.github.io/post/attacking-encryption-key/</link>
      <pubDate>Sun, 07 Mar 2021 14:31:11 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/attacking-encryption-key/</guid>
      <description>Attacking Encryption key 我们经常可以看到加密被应用在Web的以下方面： Session tokens 密码哈希 加密CAPTCHAs 服务器文件名 Cookie Hidden fields 数据库数据 在针对Web进行渗透时，我们可能需要针对这些加密进行攻击。比如如果服务器存在LFI漏洞，但是由于文件名进行了加密或者哈希处理，那么我们就需要搞清</description>
    </item>
    
    <item>
      <title>Sql Injection</title>
      <link>https://GETC2.github.io/post/sql-injection/</link>
      <pubDate>Sun, 07 Mar 2021 08:43:04 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/sql-injection/</guid>
      <description>SQL Injection 针对SQL Injection，我们可以按照以下的步骤处理： 寻找注入点 在这里不赘述如何判断注入点。最简单的情况是当输入单引号或者双引号，数据库的语法错误直接回显，然后就可以确定这是注入点。在后端不返回任何响应的情况下，可以通过猜测查询语句context来</description>
    </item>
    
    <item>
      <title>Type Inference in PHP</title>
      <link>https://GETC2.github.io/post/type-inference-in-php/</link>
      <pubDate>Fri, 05 Mar 2021 18:37:00 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/type-inference-in-php/</guid>
      <description>Type Inference in PHP PHP是动态类型语言。当定义变量时，我们不需要指定变量类型，PHP会根据赋值推断变量的类型。另外，在进行数学运算或loose comparison的时候，如果操作数类型不一致或者不与运算符相符，那么PHP会自动进行类型转换。它会根据操作数和操作符来推</description>
    </item>
    
    <item>
      <title>Templet Injection</title>
      <link>https://GETC2.github.io/post/templet-injection/</link>
      <pubDate>Thu, 04 Mar 2021 19:23:27 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/templet-injection/</guid>
      <description>Templet Injection 关于什么是模板注入，这里就不多说了。主要记录一下模板注入漏洞的利用流程。 发现模板注入漏洞 不同框架利用的模板引擎不同，所使用的模板语言也就不同。但是发现漏洞的方法是一致的。一般都是通过再用户控制的输入中插入模板语言定义的逻辑操作，比如数学计算： @(2*2) //Razor ${2*2} //Freemarker {{2*2}}</description>
    </item>
    
    <item>
      <title>File Inclusion</title>
      <link>https://GETC2.github.io/post/file-inclusion/</link>
      <pubDate>Mon, 01 Mar 2021 10:23:59 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/file-inclusion/</guid>
      <description>文件包含 要想高效地利用文件包含漏洞，我们可以遵循以下的方法： 搞清楚该漏洞针对文件路径的限制。比如 用户控制的文件名是否有前缀和后缀 是否允许根目录之外的文件路径 是否允许绝对路径或者URL 利用漏洞获取本地文件。 特定于操作系统的文件，比如Linux的/etc/pa</description>
    </item>
    
    <item>
      <title>Windows Buffer Overflow(2)</title>
      <link>https://GETC2.github.io/post/windows-buffer-overflow2/</link>
      <pubDate>Sat, 27 Feb 2021 09:12:35 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/windows-buffer-overflow2/</guid>
      <description>Windows栈溢出（2） 之前介绍过如何绕过ASLR和safeSEH并利用栈溢出；在Linux上面也介绍了如何利用ret2libc来绕过DEP。这里来介绍一下在Windows上如何绕过DEP。 主要的思路是通过调用Windows的函数来关闭DEP，然后让控制</description>
    </item>
    
    <item>
      <title>Windows Buffer Overflow</title>
      <link>https://GETC2.github.io/post/windows-buffer-overflow/</link>
      <pubDate>Thu, 25 Feb 2021 14:15:00 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/windows-buffer-overflow/</guid>
      <description>Windows栈溢出 之前的栈溢出都是关于Linux下面的程序，而Windows上面的栈溢出漏洞虽然和Linux原理相同，但是由于针对栈溢出的保护措施的实现不同，所以绕过这些措施的技术也就不同。比如Windows上面的DEP,ASLR,canary的实现就不</description>
    </item>
    
    <item>
      <title>Buffer Overflow(5)</title>
      <link>https://GETC2.github.io/post/buffer-overflow5/</link>
      <pubDate>Tue, 23 Feb 2021 19:39:16 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/buffer-overflow5/</guid>
      <description>栈溢出（5） 之前介绍过如何通过静态代码段寻找有用的指令来绕过ASLR，之前是通过linux-gate.so.1这一共享库中的jmp %esp指令完成的。这个办法在linux 2.6.17内核版本是可行的，但是之后的内核版本要么就是去除了jmp %esp指令，要么</description>
    </item>
    
    <item>
      <title>Buffer Overflow(4)</title>
      <link>https://GETC2.github.io/post/buffer-overflow4/</link>
      <pubDate>Tue, 23 Feb 2021 09:49:37 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/buffer-overflow4/</guid>
      <description>栈溢出（4） 之前提到阻止栈溢出利用的措施有DEP，canary，这次我们介绍Address Space Layout Randomization(ASLR)。 所谓的ASLR就是将栈，堆或者共享库的载入地址进行随机化，每次执行的载入地址都不同，这样的话攻击者就无法用准确的值覆盖返回</description>
    </item>
    
    <item>
      <title>Buffer Overflow(3)</title>
      <link>https://GETC2.github.io/post/buffer-overflow3/</link>
      <pubDate>Mon, 22 Feb 2021 20:06:30 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/buffer-overflow3/</guid>
      <description>栈溢出（3） 在之前的栈溢出中，我们介绍了最基本的不带任何保护的栈溢出利用，以及通过ret2libc绕过DEP从而利用栈溢出。这里我们介绍另一种阻止栈溢出的常用手段：canary。canary一般是linux中的叫法，在windows中称为security c</description>
    </item>
    
    <item>
      <title>Buffer Overflow(2)</title>
      <link>https://GETC2.github.io/post/buffer-overflow2/</link>
      <pubDate>Mon, 22 Feb 2021 09:29:38 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/buffer-overflow2/</guid>
      <description>栈溢出（2） 之前提到过如何利用最简单的栈溢出，即没有任何的保护的栈溢出。现在我们加上一些限制，然后展示如何绕过限制进行漏洞利用。 这里我们有一个栈溢出漏洞程序，它的缓冲区比较小，无法容纳shellcode，而且栈上的代码无法执行（DEP），我们需要想办法绕过</description>
    </item>
    
    <item>
      <title>Buffer Overflow</title>
      <link>https://GETC2.github.io/post/buffer-overflow/</link>
      <pubDate>Sun, 21 Feb 2021 20:56:12 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/buffer-overflow/</guid>
      <description>栈溢出(1) 说到漏洞很容易让人联想到栈溢出，这也说明了栈溢出的普遍性。正因为如此，针对栈溢出的mitigation也很多： 编译时的ASLR, DEP, LFH 操作系统的Canaries, SafeSEH 针对这些措施，也有相应的办法绕过。这里纯粹记录一下从最基本的栈溢出到如何绕过带保护</description>
    </item>
    
    <item>
      <title>AFL Fuzzing</title>
      <link>https://GETC2.github.io/post/afl-fuzzing/</link>
      <pubDate>Sat, 20 Feb 2021 09:38:43 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/afl-fuzzing/</guid>
      <description>American Fuzzy Lop (AFL) 之前介绍过Sulley这个框架，马上要介绍的AFL与Sulley有两个不同： Sulley用来测试使用协议的服务端应用；而AFL用来测试本地接受输入的应用 AFL具有一定的intelligence。它可以记录特定输入和与之对应的应用执行路径。根据这些记</description>
    </item>
    
    <item>
      <title>Sulley Fuzzing</title>
      <link>https://GETC2.github.io/post/sulley-fuzzing/</link>
      <pubDate>Fri, 19 Feb 2021 20:18:15 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/sulley-fuzzing/</guid>
      <description>Sulley是用于fuzzing的框架。针对使用特定协议运行在特定端口的服务，我们可以使用Sulley来寻找目标的漏洞。常见的比如缓冲区溢出，注入命令，directory traversal等等。基本原理就是通过研究目标使用的协议，发现可能产生漏洞的点，然后</description>
    </item>
    
    <item>
      <title>Escaping Restricted Desktops</title>
      <link>https://GETC2.github.io/post/rdp-escape/</link>
      <pubDate>Tue, 16 Feb 2021 14:18:05 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/rdp-escape/</guid>
      <description>在我们获得对一台主机的访问后，要想进行后渗透活动时可能会遇到一系列障碍。比如这台主机已经被加固过了，我们无法使用已有的工具来实现我们的目的。 常见的加固措施如下： GPO或者SRP Group Policy Objects可以用来 限制Windows的各种部件 隐藏系统文件 阻止针对系统设</description>
    </item>
    
    <item>
      <title>OSPF</title>
      <link>https://GETC2.github.io/post/ospf/</link>
      <pubDate>Wed, 10 Feb 2021 22:04:54 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/ospf/</guid>
      <description>利用OSPF实现中间人攻击 之前提到在IPv4环境下可以用arp spoofing实现中间人攻击；在IPv6的环境下可以利用arp的对等协议实现中间人攻击。除了这些，我们还可以直接利用路由协议实现中间人攻击。 这里我们以OSPF为例，展示如何实现中间人攻击。 路由</description>
    </item>
    
    <item>
      <title>sslstrip</title>
      <link>https://GETC2.github.io/post/sslstrip/</link>
      <pubDate>Wed, 10 Feb 2021 21:03:12 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/sslstrip/</guid>
      <description>sslstrip 之前提到如何利用Ettercap实现中间人攻击，并修改HTTP的响应从而获取密码。如果客户端用HTTP请求服务，而服务器要求客户端使用HTTPS的话，我们就无法修改响应。但是，我们可以利用sslstrip脚本修改服务器的HTTP响应的请求头Locatio</description>
    </item>
    
    <item>
      <title>SNMP</title>
      <link>https://GETC2.github.io/post/snmp/</link>
      <pubDate>Wed, 10 Feb 2021 19:02:52 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/snmp/</guid>
      <description>利用SNMP攻击路由器 Simple Network Management Protocal(SNMP)顾名思义就是用来管理网络设备的。在SNMP的框架中，有四个组成部分： 被管理的设备：这种设备允许通过SNMP协议读或者写SNMP变量 Agent: 运行在被管理设备上的服务 NMS: 一种管理控制台，过与agent交互，Net</description>
    </item>
    
    <item>
      <title>IPv6 Attack</title>
      <link>https://GETC2.github.io/post/ipv6-attack/</link>
      <pubDate>Wed, 10 Feb 2021 14:41:01 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/ipv6-attack/</guid>
      <description>针对IPv6服务攻击 IPv6提供了很多攻击机会。比如我们可以利用局域网内的IPv6进行中间人攻击。再比如，有的IDS支持IPv4，但是却没有针对IPv6的规则，我们可以利用这点来绕过IDS。 这一次我们利用的点在于，有的服务只能通过IPv6访问，我们可以发现</description>
    </item>
    
    <item>
      <title>Ettercap</title>
      <link>https://GETC2.github.io/post/ettercap/</link>
      <pubDate>Tue, 09 Feb 2021 14:32:30 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/ettercap/</guid>
      <description>利用Ettercap实现中间人攻击 在实现了Network Access Control的局域网上，无论是之前介绍的Captive Portal认证，还是802.1X认证，抑或是实现了VLAN的交换机，我们都可以通过某种形式的攻击绕过这种限制从而获得局域网络的访问权。在获得</description>
    </item>
    
    <item>
      <title>Captive Portal Bypass</title>
      <link>https://GETC2.github.io/post/captive-portal-bypass/</link>
      <pubDate>Mon, 08 Feb 2021 16:27:23 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/captive-portal-bypass/</guid>
      <description>Captive Portal Bypass Captive Portal就是所谓的强制门户认证系统。当我们在公共场所连接WIFI的时候，比如大学，机场，酒店，经常会有一个认证界面自动跳出来，只有经过某种形式的认证（比如用户名加密码，或者手机号加验证码）才能访问网络。这其实就是Network Access Control（</description>
    </item>
    
    <item>
      <title>红队基本流程(4)</title>
      <link>https://GETC2.github.io/post/%E7%BA%A2%E9%98%9F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B4/</link>
      <pubDate>Sun, 07 Feb 2021 22:04:03 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/%E7%BA%A2%E9%98%9F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B4/</guid>
      <description>红队基本流程之四：Closure 在实现了模拟Adversary的目标后，最后就是收尾了。 在这个步骤，红队的主要责任就是介绍整个行动的流程，从一开始的发信到之后的最终目标，所有的操作以及时间节点，还有结果都要进行记录并展示。这主要是为了和蓝队的响应做对照，看</description>
    </item>
    
    <item>
      <title>红队基本流程(3)</title>
      <link>https://GETC2.github.io/post/%E7%BA%A2%E9%98%9F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B3/</link>
      <pubDate>Sun, 07 Feb 2021 21:29:13 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/%E7%BA%A2%E9%98%9F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B3/</guid>
      <description>红队基本流程之三：Testing 在完成Planning之后，红队就可以开始针对目标行动了。而这又分为许多步骤，比较典型的就是以下步骤： 基础设施建设 侦察（Recon） 社会工程 Weaponization Initial Access Network Propagation Action on Objectives 基础设施建设 这一步一般就是选择在云端部署必要的设施，有的时候这一步需</description>
    </item>
    
    <item>
      <title>红队基本流程(2)</title>
      <link>https://GETC2.github.io/post/%E7%BA%A2%E9%98%9F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B2/</link>
      <pubDate>Fri, 05 Feb 2021 20:07:41 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/%E7%BA%A2%E9%98%9F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B2/</guid>
      <description>红队基本流程之二：Planning 之前介绍过红队基本流程中的Threat Intelligence。其实，它与planning之间是密不可分的。planning中有的决定依靠Threat Inteligence。比如Adversary使用的TTP，最后拟定的A</description>
    </item>
    
    <item>
      <title>红队基本流程(1)</title>
      <link>https://GETC2.github.io/post/%E7%BA%A2%E9%98%9F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B1/</link>
      <pubDate>Fri, 05 Feb 2021 14:13:26 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/%E7%BA%A2%E9%98%9F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B1/</guid>
      <description>红队基本流程之一：Threat Intelligence 简介 在进行红队活动时，需要遵循一定的框架和方法。这里的框架和方法确定了针对特定目标进行模拟红队行动的宏观步骤。如今存在着很多可供选择的框架和方法，这里我们介绍其中一个，总共分为四个步骤，如下图所示： 我们首先介绍第一步，即Th</description>
    </item>
    
    <item>
      <title>XSS</title>
      <link>https://GETC2.github.io/post/xss/</link>
      <pubDate>Wed, 03 Feb 2021 13:59:10 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/xss/</guid>
      <description>Cross Site Scripting XSS漏洞大概分为三种： 反射型XSS 存储型XSS DOM XSS 其中存储型的漏洞的注入点一般是博客的评论，社交网站的各种个人介绍或者动态。这些注入是直接通过HTTP来和目标服务交互的。但是除了这种注入外，还有一种称为Out-of-band存储型XSS。 具体来说就</description>
    </item>
    
    <item>
      <title>Username Harvesting</title>
      <link>https://GETC2.github.io/post/username-harvesting/</link>
      <pubDate>Mon, 01 Feb 2021 18:48:32 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/username-harvesting/</guid>
      <description>在针对Web进行渗透测试并发现用户登录入口的时候，下一步就是字典或者爆破。但是为了更有效率，我们首先需要有效的用户名列表。 我们可以在收集信息时就注意有关用户名的信息；另一种方法就是依靠登录界面面对有效用户名和无效用户名的不一致性来推测。这又细分为两种方法：</description>
    </item>
    
    <item>
      <title>Virtual Host Discovery</title>
      <link>https://GETC2.github.io/post/virtual-host-discovery/</link>
      <pubDate>Sat, 30 Jan 2021 18:34:55 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/virtual-host-discovery/</guid>
      <description>之前说过在针对Web进行渗透测试时，需要知道目标的Host Name。因为一个IP可能有多个Host，不知道对应的域名，就无法访问网站，那么渗透测试也就无从说起。 针对这个问题，之前通过DNS试图寻找目标的隐藏Host。其实我们还可以通过HTTPS证书来查找目</description>
    </item>
    
    <item>
      <title>DNS Harvesting</title>
      <link>https://GETC2.github.io/post/dns-harvesting/</link>
      <pubDate>Sat, 30 Jan 2021 15:08:37 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/dns-harvesting/</guid>
      <description>DNS Harvesting 在针对Web进行渗透时，我们需要尽可能地掌握目标的所有可访问域名。有的域名并没有被目标的其他的页面reference到的情况下，我们可以利用DNS来获取隐藏域名。 通过DNS的话一般有以下几个方法： DNS zone transfer DNS brute force DNS reverse lookup 一般来说DNS zone transfer的情况</description>
    </item>
    
    <item>
      <title>Golden Ticket</title>
      <link>https://GETC2.github.io/post/golden-ticket/</link>
      <pubDate>Fri, 29 Jan 2021 21:05:37 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/golden-ticket/</guid>
      <description>Golden Ticket 之前我们利用Kerberoasting获取了具有域管理员权限的账号svcsqlserver，我们可以利用这个账号和dcsync来获取krbtgt账号的hash，从而可以生成Golden Ticket，其实就是伪造的域管理员的TGT。 实验 首先登陆到目标域的</description>
    </item>
    
    <item>
      <title>Responder</title>
      <link>https://GETC2.github.io/post/responder/</link>
      <pubDate>Fri, 29 Jan 2021 19:48:33 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/responder/</guid>
      <description>Responder获取NetNTLM哈希 windows的命名解析顺序如下： 本地host文件 DNS Link-Local Multicast Name Resolution （LLMNR） NetBIOS 如果输入的主机名错误，那么目标机器就会利用LLMNR向子网内的主机发送解析请求。作为攻击者，我们可以声称我们是对应的主机，并要求进行NetN</description>
    </item>
    
    <item>
      <title>Kerberoasting</title>
      <link>https://GETC2.github.io/post/kerberoasting/</link>
      <pubDate>Fri, 29 Jan 2021 19:07:11 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/kerberoasting/</guid>
      <description>Kerberoasting kerberoasting是通过向KDC请求针对目标服务的服务票据并针对该服务对应的账号进行破解的攻击。 合适的目标服务是对应的账号是手动生成的，因为机器自动生成的账号密码很难破解。 实验设置 我们已经得到了目标域的一个有效的账号密码，现在我们需要利用这个账号</description>
    </item>
    
    <item>
      <title>Sniff Ntlm</title>
      <link>https://GETC2.github.io/post/sniff-ntlm/</link>
      <pubDate>Thu, 28 Jan 2021 15:54:52 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/sniff-ntlm/</guid>
      <description>嗅探NTLM协议并破解密码 除了dump目标机器的hash之外，还可以直接嗅探NTLM协议然后破解密码。 下面介绍一下基本的步骤和时用到的工具。 1. 嗅探NTLM协议 首先我们使用tcpdump来嗅探针对端口445的访问： sudo tcpdump -nv -s0 port 445 -w /tmp/winauth.pcap 参数-s0是为了指示tcpd</description>
    </item>
    
    <item>
      <title>Msf Pivot</title>
      <link>https://GETC2.github.io/post/msf-pivot/</link>
      <pubDate>Thu, 28 Jan 2021 15:13:59 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/msf-pivot/</guid>
      <description>与metasploit有关的pivoting方法总结 1. metasploit内置的端口转发 首先是最简单的端口转发，命令如下所示： portfwd add -l local_port_num -r ip_addr -p remote_port_num 在meterpreter内执行此命令后，会在本地端口和远程IP很远程端口之间转发。 2. metasploit内置的ro</description>
    </item>
    
    <item>
      <title>Dump the Hash</title>
      <link>https://GETC2.github.io/post/dump-the-hash/</link>
      <pubDate>Thu, 28 Jan 2021 14:41:09 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/dump-the-hash/</guid>
      <description>利用meterpreter获取目标机器的hash 在后渗透的阶段，很重要的一项任务就是获取目标机器上的hash，当然不论是windows还是linux都需要有相应的权限才有可能获取到hash。 在这里，我们演示如何通过meterpreter的后渗透模块来获取h</description>
    </item>
    
    <item>
      <title>Hydra</title>
      <link>https://GETC2.github.io/post/hydra/</link>
      <pubDate>Thu, 28 Jan 2021 13:56:42 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/hydra/</guid>
      <description>利用Hydra进行password guessing 在对密码进行猜测时，Hydra很灵活。它可以针对单个或者多个目标进行密码猜测，同时支持单个用户，密码或者用户列表，密码列表来进行密码猜测。 完善字典 由于目标可能存在lockout，我们需要尽可能完善字典，删除不必要的密码。</description>
    </item>
    
    <item>
      <title>Empire</title>
      <link>https://GETC2.github.io/post/empire/</link>
      <pubDate>Wed, 27 Jan 2021 08:22:03 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/empire/</guid>
      <description>Empire的基本使用流程 Empire是用于后渗透阶段的框架，里面整合了用于各种后渗透阶段活动的powershell脚本。这里记录一下empire的基本使用流程。 实验环境 实验由两台主机组成，一个是攻击者主机，另一台是目标主机。 实验步骤 1 启动Empire 首先</description>
    </item>
    
    <item>
      <title>Netcat port forward</title>
      <link>https://GETC2.github.io/post/netcat_port_forward/</link>
      <pubDate>Wed, 27 Jan 2021 07:58:38 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/netcat_port_forward/</guid>
      <description>利用netcat实现端口转发 实验环境 现有两台主机，一台是攻击者主机（windows），另一台是目标主机（Linux）。目标是通过攻击者主机成功登录目标主机ssh服务。 实验步骤 首先利用Putty登录目标主机： 可以看到成功登录ssh服务。 然后我们在目标主机的防</description>
    </item>
    
    <item>
      <title>Veil</title>
      <link>https://GETC2.github.io/post/veil/</link>
      <pubDate>Tue, 26 Jan 2021 18:32:29 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/veil/</guid>
      <description>Veil的一般使用流程 veil框架主要用来生成payload并对payload进行免杀。下面我们来看一下veil的基本使用步骤。 veil主要由两个工具组成，我们主要关注如何通过Evasion来对payload免杀。可以看到，初始界面会提示veil支持的命令</description>
    </item>
    
    <item>
      <title>Nmap</title>
      <link>https://GETC2.github.io/post/nmap/</link>
      <pubDate>Thu, 21 Jan 2021 12:42:25 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/nmap/</guid>
      <description>Nmap完整使用流程 Host discovery 第一步是发现上线机器，由于nmap默认端口扫描之前会进行机器上线确定，如果单纯为了扫描机器而不需要扫描端口的话，可以直接指定·-sP选项： 由于指定了--packet-trace选项，nmap会显示具体的发包。可以看出，由于目标地址块</description>
    </item>
    
    <item>
      <title>Recon-ng</title>
      <link>https://GETC2.github.io/post/recon-ng/</link>
      <pubDate>Mon, 18 Jan 2021 21:00:11 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/recon-ng/</guid>
      <description>利用Recon-ng收集信息 Recon-ng是一个用来收集目标的框架。通过这篇博客来记录Recon-ng的基本使用。 实验设置 目标的DNS服务器地址是10.10.10.60. 利用已有的目标IP地址块来进行反向DNS查询确定域名。 利用DNS cache snooping来</description>
    </item>
    
    <item>
      <title>Metadata Treasure Hunt</title>
      <link>https://GETC2.github.io/post/metadata-threasure-hunt/</link>
      <pubDate>Mon, 18 Jan 2021 15:34:26 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/metadata-threasure-hunt/</guid>
      <description>文件元数据收集 （Recon） 通过这个博客来展示在recon的过程中，如何从文件元数据中获得有用的信息。 实验设置 现在我们手头上有三个文件： WidgetStatisticalAnalysis.xls WidgetStatisticalWhitepaper.doc WidgetStatisticalWhitepaper.pdf 目标是利用exiftool和strings来收集关于目标的信息。 Exiftool 首先用exiftool来看看doc文件有什么元数</description>
    </item>
    
    <item>
      <title>Egress Analysis</title>
      <link>https://GETC2.github.io/post/egress-analysis/</link>
      <pubDate>Wed, 30 Dec 2020 09:52:56 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/egress-analysis/</guid>
      <description>简介 作为红队，我们需要知道蓝队是如何防守的，这样我们才能更好地进攻。我们以Data Exfiltration为例，来研究蓝队是如何检测和阻止的。 实验环境 如上图所示，红队需要把sensitive_data.csv上传到攻击者的机器上；而蓝队需要检测并阻止红队的</description>
    </item>
    
    <item>
      <title>Accessing Internal Websites with Host Head Injection</title>
      <link>https://GETC2.github.io/post/accessing-internal-websites/</link>
      <pubDate>Sun, 08 Nov 2020 14:39:50 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/accessing-internal-websites/</guid>
      <description>有的公司会让同一个服务器伺服外部网站和内部网站。这样的服务器同时具有公网IP和内网IP。如果光是查看DNS record的话无法知道外部网站和内部网站位于同一个服务器；而且有的内部域名并没有公共的DNS record。但是只要知道内部域名对应的IP地址或者域名</description>
    </item>
    
    <item>
      <title>Bypass Authentication with Host Header Injection</title>
      <link>https://GETC2.github.io/post/access-restricted-func/</link>
      <pubDate>Sun, 08 Nov 2020 10:55:47 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/access-restricted-func/</guid>
      <description>有的应用通过Host头部来实现用户认证，这种时候可以通过操作Host头部来绕过认证。 这种情况比较简单，直接通过lab来说明比较直观。 lab lab描述 访问管理员页面并删除用户carlos的帐号。 首先需要搞清楚管理员页面是什么。我们可以通过burpsuite来对应</description>
    </item>
    
    <item>
      <title>Web Cache Poisoning</title>
      <link>https://GETC2.github.io/post/web-cache-poison/</link>
      <pubDate>Sun, 08 Nov 2020 09:11:56 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/web-cache-poison/</guid>
      <description>这一篇博客主要记录如何利用Host头部注入以及Web cache poisoning来实现客户端攻击。 有的时候我们会发现应用容易受到Host头部攻击，应用会将攻击者注入Host头部的payload返回给用户。XSS和Host头部注入有点相似，XSS是攻击者构造链接诱使</description>
    </item>
    
    <item>
      <title>Password Reset Poisoning</title>
      <link>https://GETC2.github.io/post/password-reset-poisoning/</link>
      <pubDate>Sat, 07 Nov 2020 10:28:48 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/password-reset-poisoning/</guid>
      <description>上一篇博客讲的是Host头部注入攻击。这种攻击可以用来实现多种其他种类的攻击。其中一种就是password reset poisoning . 下面通过两个lab来具体看看这种攻击是如何重置其他用户的密码的。 一般的网站都有密码重置功能。其中一种实现方法是提供需要重置密码的用户名，然后网站</description>
    </item>
    
    <item>
      <title>Host头部攻击</title>
      <link>https://GETC2.github.io/post/host-head-attack/</link>
      <pubDate>Thu, 05 Nov 2020 16:02:41 +0800</pubDate>
      
      <guid>https://GETC2.github.io/post/host-head-attack/</guid>
      <description>Host头部由来 HTTP/1.1强制要求Host请求头。在以下几种情况下，没有Host头部无法获得请求的资源。 在服务器同时伺服多个域名的时候，服务器需要知道请求所指向的具体域名。 客户端与多个后端之间存在中间节点，比如负载均衡器和反向代理。此时中间节点需要知</description>
    </item>
    
  </channel>
</rss>
